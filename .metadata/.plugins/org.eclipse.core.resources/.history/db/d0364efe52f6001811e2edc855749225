package controller.copy;

import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import model.Ball;
import model.ListOfBalls;

import static controller.copy.Controller.Move.*;
import static controller.copy.Controller.Orientation.*;
import static controller.copy.Controller.State.*;
import static model.Ball.Color.*;

import java.util.ArrayList;
import java.util.List;

public class Controller {

    @FXML
    private GridPane board1;
    
	private static ListOfBalls blackBallList = new ListOfBalls();
    Image arrow = new Image(Controller.class.getResourceAsStream("baseline_arrow_forward_black_36dp.png"));
    //private static Ball firstBall;
    //private static Ball lastBall;
    
    public enum State {CHOOSE_FIRST_BALL, CHOOSE_SECOND_BALL, CHOOSE_MOVE};
    public enum Orientation {DIAGONAL_NE_WS, DIAGONAL_NW_SE, HORIZONTAL};
    public enum Move {	E(0), SE(1), SW(2), W(3), NW(4), NE(5);
    				 	private int id;
    				 	Move(int id) { this.id=id; }
    				 	int id() { return id; }
    };
    Move move;

    private static State state;
    private static List<Ball> chosenBalls = new ArrayList<>();
    private static List<ImageView> moveButtons = new ArrayList<>();
    private static Orientation orientation;
    private static int dx;
    private static int dy;
    
    @FXML 
    void startGame() {
    	state = CHOOSE_FIRST_BALL;
    	//if(blackBallList.isEmpty()) {
    	for (int i=4; i<13; i+=2) {
    		Ball ball = new Ball(BLACK, i, 0);
    		blackBallList.add(ball);
    		board1.add(ball, i, 0);
    	}
    	for (int i=3; i<14; i+=2) {
    		Ball ball = new Ball(BLACK, i, 1);
    		blackBallList.add(ball);
    		board1.add(ball, i, 1);
    	}
    	for (int i=6; i<11; i+=2) {
    		Ball ball = new Ball(BLACK, i, 2);
    		blackBallList.add(ball);
    		board1.add(ball, i, 2);
    	}
    	
    	for ( Ball ball : blackBallList) {
    		ball.setOnMouseClicked(e -> clickBlackBall(ball));
    	}
    	//}
    }
    
    void clickBlackBall(Ball ball) {

    	System.out.println(state);
    	if (state == CHOOSE_FIRST_BALL) {
    		if(ball.getImage().equals(Ball.blackBallImg)) ball.setImage(Ball.whiteBallImg);
        	else ball.setImage(Ball.blackBallImg);
    		
    		chosenBalls.add(ball);
    		state = CHOOSE_SECOND_BALL;
    	}
    	
    	else if (state == CHOOSE_SECOND_BALL) {
    		
    		int x1 = chosenBalls.get(0).getPosX();
    		int x2 = ball.getPosX();
    		int y1 = chosenBalls.get(0).getPosY();
    		int y2 = ball.getPosY();

    		if(chosenBalls.get(0).equals(ball)) {
    			
    		}
    		if (y2 == y1) {
				for (int i = x2>x1 ? 1 : -1 ;; i += x2>x1 ? 1 : -1) {
					System.out.println(i);
					Ball tmpBall = blackBallList.getBall(x1+2*i, y2);
					if(tmpBall != null) {
    					tmpBall.setImage(Ball.whiteBallImg);
    					chosenBalls.add(tmpBall);
    				}
					if(2*i==x2-x1) break;
				}
				orientation = HORIZONTAL;
				state = CHOOSE_MOVE;
    		}
 
    		else if (x2 - x1 == y2 - y1) {
				for (int i = x2>x1 ? 1 : -1 ;; i += x2>x1 ? 1 : -1) {
					System.out.println(i);
					Ball tmpBall = blackBallList.getBall(x1+i, y1+i);
					if(tmpBall != null) {
    					tmpBall.setImage(Ball.whiteBallImg);
    					chosenBalls.add(tmpBall);
    				}
					if(i==x2-x1) break;
				}
				orientation = DIAGONAL_NW_SE;
				state = CHOOSE_MOVE;		
    		}	
			
			else if (x2 - x1 == -(y2 - y1)) {
				for (int i = y2>y1 ? 1 : -1 ;; i += y2>y1 ? 1 : -1) {
					System.out.println(i);
					Ball tmpBall = blackBallList.getBall(x1-i, y1+i);
					if(tmpBall != null) {
    					tmpBall.setImage(Ball.whiteBallImg);
    					chosenBalls.add(tmpBall);
    				}
					if(i==y2-y1) break;
				}
				orientation = DIAGONAL_NE_WS;
				state = CHOOSE_MOVE;		
			}
    		
    		int[] k= {0, 0, 0, 0, 0, 0};
    		int numberOfBalls = chosenBalls.size();
    		for (Ball tmpBall : chosenBalls) {
    			if(blackBallList.getBall(tmpBall.getPosX()+2, tmpBall.getPosY())==null) k[E.id]++;
    			if(blackBallList.getBall(tmpBall.getPosX()+1, tmpBall.getPosY()+1)==null) k[SE.id]++;
    			if(blackBallList.getBall(tmpBall.getPosX()-1, tmpBall.getPosY()+1)==null) k[SW.id]++;
    			if(blackBallList.getBall(tmpBall.getPosX()-2, tmpBall.getPosY())==null) k[W.id]++;
    			if(blackBallList.getBall(tmpBall.getPosX()-1, tmpBall.getPosY()-1)==null) k[NW.id]++;
    			if(blackBallList.getBall(tmpBall.getPosX()+1, tmpBall.getPosY()-1)==null) k[NE.id]++;
    		}
    		

    		//System.out.println(""+k[0]+k[1]+k[2]+k[3]+k[4]+k[5]);
    
    		if (k[E.id]==numberOfBalls) {
				ImageView btn = new ImageView(arrow);
				btn.setRotate(0);
				btn.setOnMouseClicked(e -> moveChoiceClicked(E, btn));
				moveButtons.add(btn);
				board1.add(btn, x2+2, y2, 1, 1 );
			}
			if (k[W.id]==numberOfBalls) {
				ImageView btn = new ImageView(arrow);
				btn.setRotate(180);
				moveButtons.add(btn);
				btn.setOnMouseClicked(e -> moveChoiceClicked(W, btn));
				board1.add(btn, x2-2, y2, 1, 1 );
			}
			if (k[SE.id]==numberOfBalls) {
				ImageView btn = new ImageView(arrow);
				btn.setRotate(60);
				moveButtons.add(btn);
				btn.setOnMouseClicked(e -> moveChoiceClicked(SE, btn));
				board1.add(btn,  x2+1, y2+1, 1, 1 );
			}
			if (k[NW.id]==numberOfBalls) {
				ImageView btn = new ImageView(arrow);
				btn.setRotate(240);
				moveButtons.add(btn);
				board1.add(btn, x2-1, y2-1, 1, 1 );
			}
			if (k[NE.id]==numberOfBalls) {
				ImageView btn = new ImageView(arrow);
				btn.setRotate(300);
				moveButtons.add(btn);
				board1.add(btn, x2+1, y2-1, 1, 1 );
			}
			if (k[SW.id]==numberOfBalls) {
				ImageView btn = new ImageView(arrow);
				btn.setRotate(120);
				moveButtons.add(btn);
				board1.add(btn, x2-1, y2+1, 1, 1 );
			}
				
    	}
    	
    	else if (state == CHOOSE_MOVE) {
    		int x2 = chosenBalls.get(chosenBalls.size()-1).getPosX();
    		int x3 = ball.getPosX();
    		int y2 = chosenBalls.get(chosenBalls.size()-1).getPosY();
    		int y3 = ball.getPosY();
    		System.out.println(chosenBalls);
    		
    		//System.out.println(y2);
    		if (orientation == HORIZONTAL) {
 

        		if(x3-x2 == 2) {
        			System.out.println("Chcesz isc w prawo");
        		}
        		//if(x3-x2 == )
    		}
    		
    		
    		
    	}
  
    }
    
    private void moveChoiceClicked(Move move, ImageView btn) {
    	if (move == SE) {
    		for (Ball tmpBall : chosenBalls) {  
    			int x = tmpBall.getPosX();
    			int y = tmpBall.getPosY();
    			blackBallList.remove(tmpBall);
    			board1.getChildren().removeAll(moveButtons);
    			moveButtons.removeAll(moveButtons);
    			board1.getChildren().remove(tmpBall);
    			Ball newBall = new Ball(BLACK, x+1, y+1);
    			newBall.setOnMouseClicked(e -> clickBlackBall(newBall));
    			board1.add(newBall, x+1, y+1);
    			blackBallList.add(newBall);
    			
    			
       		}
    	}
 
		chosenBalls.removeAll(chosenBalls);
    	state = CHOOSE_FIRST_BALL;
    }

}
