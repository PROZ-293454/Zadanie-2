package controller;

import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import model.Ball;
import model.Ball.Color;
import model.ListOfBalls;
import view.Main;

import static controller.Controller.Move.*;
import static controller.Controller.Orientation.*;
import static controller.Controller.State.*;
import static model.Ball.Color.*;

import java.util.ArrayList;
import java.util.List;

public class Controller {

	@FXML
	private GridPane board;

	private static ListOfBalls myBallsList = new ListOfBalls();
	private static ListOfBalls opponentBallsList = new ListOfBalls();
	private static ListOfBalls opponentToMoveBalls = new ListOfBalls();
	Image arrow = new Image(Main.class.getResourceAsStream("baseline_arrow_forward_black_36dp.png"));
	// private static Ball firstBall;
	// private static Ball lastBall;

	public enum State {
		CHOOSE_FIRST_BALL, CHOOSE_SECOND_BALL, CHOOSE_MOVE
	};

	public enum Orientation {
		DIAGONAL_NE_WS, DIAGONAL_NW_SE, HORIZONTAL;
		
		static Orientation getOrientation(int dx, int dy) {
			if (dy == 0)
				return HORIZONTAL;
			else if (dx == dy)
				return DIAGONAL_NW_SE;
			else
				return DIAGONAL_NE_WS;
		}
	};

	public enum Move {
		E(0, 2, 0), SE(1, 1, 1), SW(2, -1, 1), W(3, -2, 0), NW(4, -1, -1), NE(5, 1, -1);
		private int id, dx, dy;

		Move(int id, int dx, int dy) {
			this.id = id;
			this.dx = dx;
			this.dy = dy;
		}

		int id() {
			return id;
		}

		int dx() {
			return dx;
		}

		int dy() {
			return dy;
		}
	};

	Move move;

	private static State state;
	private static List<Ball> chosenBalls = new ArrayList<>();
	private static List<ImageView> moveButtons = new ArrayList<>();
	private static Orientation orientation;
	private static int dx;
	private static int dy;

	@FXML
	void startGame() {
		state = CHOOSE_FIRST_BALL;
		addBalls();
	}

	void clickBlackBall(Ball ball) {

		System.out.println(state);
		if (state == CHOOSE_FIRST_BALL) {
			if (ball.getImage().equals(Ball.blackBallImg))
				ball.setImage(Ball.whiteBallImg);
			else
				ball.setImage(Ball.blackBallImg);

			chosenBalls.add(ball);
			state = CHOOSE_SECOND_BALL;
		}

		else if (state == CHOOSE_SECOND_BALL) {

			int x1 = chosenBalls.get(0).getPosX();
			int x2 = ball.getPosX();
			int y1 = chosenBalls.get(0).getPosY();
			int y2 = ball.getPosY();
			int dx=x2-x1;
			int dy=y2-y1;

			if (chosenBalls.get(0).equals(ball)) {

			}
			/*if (y2 == y1) {
				for (int i = x2 > x1 ? 1 : -1;; i += x2 > x1 ? 1 : -1) {
					System.out.println(i);
					Ball tmpBall = myBallsList.getBall(x1 + 2 * i, y2);
					if (tmpBall != null) {
						tmpBall.setImage(Ball.whiteBallImg);
						chosenBalls.add(tmpBall);
					}
					if (2 * i == x2 - x1)
						break;
				}
				orientation = HORIZONTAL;
				state = CHOOSE_MOVE;
			}

			else if (x2 - x1 == y2 - y1) {
				for (int i = x2 > x1 ? 1 : -1;; i += x2 > x1 ? 1 : -1) {
					System.out.println(i);
					Ball tmpBall = myBallsList.getBall(x1 + i, y1 + i);
					if (tmpBall != null) {
						tmpBall.setImage(Ball.whiteBallImg);
						chosenBalls.add(tmpBall);
					}
					if (i == x2 - x1)
						break;
				}
				orientation = DIAGONAL_NW_SE;
				state = CHOOSE_MOVE;
			}

			else if (x2 - x1 == -(y2 - y1)) {
				for (int i = y2 > y1 ? 1 : -1;; i += y2 > y1 ? 1 : -1) {
					System.out.println(i);
					Ball tmpBall = myBallsList.getBall(x1 - i, y1 + i);
					if (tmpBall != null) {
						tmpBall.setImage(Ball.whiteBallImg);
						chosenBalls.add(tmpBall);
					}
					if (i == y2 - y1)
						break;
				}
				orientation = DIAGONAL_NE_WS;
				state = CHOOSE_MOVE;
			}*/
			
			chooseBalls(dx, dy, x1, y1);

			int[] k = { 0, 0, 0, 0, 0, 0 };
			Move[] tableOfMoves = { E, SE, SW, W, NW, NE };

			int numberOfBalls = chosenBalls.size();
			for (Ball tmpBall : chosenBalls) {
				for (Move move : tableOfMoves) {
					if (myBallsList.getBall(tmpBall.getPosX() + move.dx(), tmpBall.getPosY() + move.dy()) == null)
						k[move.id]++;
				}
			}

			// System.out.println(""+k[0]+k[1]+k[2]+k[3]+k[4]+k[5]);

			for (Move move : tableOfMoves) {
				if (k[move.id()] == numberOfBalls) {
					setOneMoveButton(move, x2, y2);
				}

				if (orientation == HORIZONTAL) {
					for (int i = 1; i <= 3; i++) {
						Ball tmpBall = myBallsList.getBall(x2 + 2 * i, y2);
						if (tmpBall == null) {
							ImageView btn = new ImageView(arrow);
							btn.setRotate(0);
							moveButtons.add(btn);
							board.add(btn, x2 + 2, y2, 1, 1);
							break;
						} else if (tmpBall.getColor() == BLACK)
							break;

					}
					for (int i = 1; i <= 3; i++) {
						Ball tmpBall = myBallsList.getBall(x2 - 2 * i, y2);
						if (tmpBall == null) {
							ImageView btn = new ImageView(arrow);
							btn.setRotate(0);
							moveButtons.add(btn);
							board.add(btn, x2 - 2, y2, 1, 1);
							break;
						} else if (tmpBall.getColor() == BLACK)
							break;

					}
				}

				if (orientation == DIAGONAL_NE_WS) {
					for (int i = 1; i <= 3; i++) {
						Ball tmpBall = myBallsList.getBall(x2 + i, y2 - i);
						if (tmpBall == null) {
							ImageView btn = new ImageView(arrow);
							btn.setRotate(0);
							moveButtons.add(btn);
							board.add(btn, x2 + 1, y2 - 1, 1, 1);
							break;
						} else if (tmpBall.getColor() == WHITE)
							opponentToMoveBalls.add(tmpBall);
						else if (tmpBall.getColor() == BLACK)
							break;

					}
					for (int i = 1; i <= 3; i++) {
						Ball tmpBall = myBallsList.getBall(x2 - i, y2 + i);
						if (tmpBall == null) {
							ImageView btn = new ImageView(arrow);
							btn.setRotate(0);
							moveButtons.add(btn);
							board.add(btn, x2 - 1, y2 + i, 1, 1);
							break;
						} else if (tmpBall.getColor() == WHITE)
							opponentToMoveBalls.add(tmpBall);
						else if (tmpBall.getColor() == BLACK)
							break;

					}
				}

				if (orientation == DIAGONAL_NW_SE) {
					for (int i = 1; i <= 3; i++) {
						Ball tmpBall = myBallsList.getBall(x2 + i, y2 - i);
						if (tmpBall == null) {
							ImageView btn = new ImageView(arrow);
							btn.setRotate(0);
							moveButtons.add(btn);
							board.add(btn, x2 + 1, y2 - 1, 1, 1);
							break;
						} else if (tmpBall.getColor() == WHITE)
							opponentToMoveBalls.add(tmpBall);
						else if (tmpBall.getColor() == BLACK)
							break;

					}
					for (int i = 1; i <= 3; i++) {
						Ball tmpBall = myBallsList.getBall(x2 - i, y2 + i);
						if (tmpBall == null) {
							ImageView btn = new ImageView(arrow);
							btn.setRotate(0);
							moveButtons.add(btn);
							board.add(btn, x2 - 1, y2 + i, 1, 1);
							break;
						} else if (tmpBall.getColor() == WHITE)
							opponentToMoveBalls.add(tmpBall);
						else if (tmpBall.getColor() == BLACK)
							break;

					}
				}

			}
		}

		/*
		 * else if (state == CHOOSE_MOVE) { int x2 = chosenBalls.get(chosenBalls.size()
		 * - 1).getPosX(); int x3 = ball.getPosX(); int y2 =
		 * chosenBalls.get(chosenBalls.size() - 1).getPosY(); int y3 = ball.getPosY();
		 * System.out.println(chosenBalls);
		 * 
		 * // System.out.println(y2); if (orientation == HORIZONTAL) {
		 * 
		 * if (x3 - x2 == 2) { System.out.println("Chcesz isc w prawo"); } // if(x3-x2
		 * == ) }
		 * 
		 * }
		 */

	}

	private void moveChoiceClicked(Move move) {
		moveBalls(move);
		chosenBalls.removeAll(chosenBalls);
		state = CHOOSE_FIRST_BALL;
	}

	private void addBalls() {
		// adding my balls
		for (int i = 4; i < 13; i += 2) {
			Ball ball = new Ball(BLACK, i, 0);
			myBallsList.add(ball);
			board.add(ball, i, 0);
		}
		for (int i = 3; i < 14; i += 2) {
			Ball ball = new Ball(BLACK, i, 1);
			myBallsList.add(ball);
			board.add(ball, i, 1);
		}
		for (int i = 6; i < 11; i += 2) {
			Ball ball = new Ball(BLACK, i, 2);
			myBallsList.add(ball);
			board.add(ball, i, 2);
		}

		// adding opponent's balls
		for (int i = 4; i < 13; i += 2) {
			Ball ball = new Ball(WHITE, i, 0);
			opponentBallsList.add(ball);
			board.add(ball, i, 8);
		}
		for (int i = 3; i < 14; i += 2) {
			Ball ball = new Ball(WHITE, i, 1);
			opponentBallsList.add(ball);
			board.add(ball, i, 7);
		}
		for (int i = 6; i < 11; i += 2) {
			Ball ball = new Ball(WHITE, i, 2);
			opponentBallsList.add(ball);
			board.add(ball, i, 6);
		}

		// adding listeners to my balls
		for (Ball ball : myBallsList) {
			ball.setOnMouseClicked(e -> clickBlackBall(ball));
		}

	}

	private void moveBalls(Move move) {
		dx = move.dx();
		dy = move.dy();
		for (Ball tmpBall : chosenBalls) {
			int x = tmpBall.getPosX();
			int y = tmpBall.getPosY();
			myBallsList.remove(tmpBall);
			board.getChildren().removeAll(moveButtons);
			moveButtons.removeAll(moveButtons);
			board.getChildren().remove(tmpBall);
			Ball newBall = new Ball(BLACK, x + dx, y + dy);
			newBall.setOnMouseClicked(e -> clickBlackBall(newBall));
			board.add(newBall, x + dx, y + dy);
			myBallsList.add(newBall);
		}
	}

	private void setOneMoveButton(Move move, int x2, int y2) {
		ImageView btn = new ImageView(arrow);
		btn.setRotate(120);
		moveButtons.add(btn);
		btn.setOnMouseClicked(e -> moveChoiceClicked(move));
		board.add(btn, x2 + move.dx(), y2 + move.dy(), 1, 1);
	}
	
	private void chooseBalls(int dx, int dy, int x1, int y1) {
		for (int i = dx > 0 ? 1 : -1;; i += dx > 0 ? 1 : -1) {
			Ball tmpBall = myBallsList.getBall(x1 + dx, y1 + dy);
			if (tmpBall != null) {
				tmpBall.setImage(Ball.whiteBallImg);
				chosenBalls.add(tmpBall);
			}
			if (2 * i == dx + dy)
				break;
		}
		orientation = Orientation.getOrientation(dx, dy);
		state = CHOOSE_MOVE;
	}

}
