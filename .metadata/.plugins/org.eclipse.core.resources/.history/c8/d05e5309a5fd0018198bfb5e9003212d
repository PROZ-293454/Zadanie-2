package model;

import view.Color;
import model.State;

import java.util.ArrayList;
import java.util.List;

import static view.Color.*;
import static model.State.*;
import static model.Step.*;
import static model.Orientation.*;

public class BoardModel {

	private ListOfBalls myBalls;
	private ListOfBalls opponentBalls;
	private ListOfBalls myBallsToMove;
	private Orientation ballsToMoveOrientation;
	private ListOfBalls opponentBallsToMove;
	public static final Color MY_COLOR = BLACK;
	public static final Step[] tableOfMoves = { E, SE, SW, W, NW, NE };

	private State state;
	private int myCounter;
	private int opponentCounter;

	private List<Step> possibleMoves;

	public BoardModel() {
		this.myBalls = new ListOfBalls();
		this.opponentBalls = new ListOfBalls();
		this.myBallsToMove = new ListOfBalls();
		this.ballsToMoveOrientation = HORIZONTAL;
		this.opponentBallsToMove = new ListOfBalls();
		this.state = MY_COLOR == BLACK ? CHOOSE_FIRST_BALL : null;
		this.myCounter = 0;
		this.opponentCounter = 0;
		this.possibleMoves = new ArrayList<>();
		setBoardModel();
	}

	private ListOfBalls getList(Color color) {
		if (color == MY_COLOR)
			return myBalls;
		else
			return opponentBalls;
	}

	private boolean moveBall(Ball ball, Step move) {
		boolean isOnBoard = ball.move(move.dx(), move.dy());

		if (isOnBoard)
			return true;
		else {
			getList(ball.getColor()).remove(ball);
			return false;
		}
	}

	/*
	 * private Ball moveBall(int x, int y, Color color, Step move) { Ball ball =
	 * getList(color).getBall(x, y); boolean isMoved = ball.move(move.dx(),
	 * move.dy());
	 * 
	 * if (isMoved) return ball; else { getList(color).remove(ball); return null; }
	 * }
	 */

	public boolean chooseFirstBall(int x, int y) {
		Ball ball = myBalls.getBall(x, y);
		myBallsToMove.add(ball);

		state = CHOOSE_SECOND_BALL;
		return true;
	}

	public Step chooseBallLine(int x2, int y2) {
		int x1 = myBallsToMove.get(0).getX();
		int y1 = myBallsToMove.get(0).getY();
		int dx2_1 = x2 - x1;
		int dy2_1 = y2 - y1;
		if (dx2_1 ==0 && dy2_1 ==0) {
			state = CHOOSE_MOVE;
			ballsToMoveOrientation = HORIZONTAL;
			return E;
		}
		Step step = Step.getStep(dx2_1, dy2_1);
		if (step != null) {
			int dx = step.dx();
			int dy = step.dy();
			int lineLength = (Math.abs(dx2_1) + Math.abs(dy2_1)) / 2;

			for (int i = 1; i <= lineLength; i++) {
				Ball ball = myBalls.getBall(x1 + dx * i, y1 + dy * i);
				myBallsToMove.add(ball);
			}
			ballsToMoveOrientation = Orientation.getOrientation(dx, dy);
			state = CHOOSE_MOVE;
			return step;
		} else
			return null;
	}

	public void moveBallLine(Step move) {
		for (Ball ball : myBallsToMove) {
			boolean isMoved = moveBall(ball, move);
			if (!isMoved)
				opponentCounter++;
		}
		for (Ball ball : opponentBallsToMove) {
			boolean isMoved = moveBall(ball, move);
			if (!isMoved)
				myCounter++;
		}
		myBallsToMove.clear();
		opponentBallsToMove.clear();
	}

	public List<Step> createListOfMoves() {

		int[] freeFields = makeFreeFieldsTable();
		System.out.println(""+freeFields[0]+freeFields[1]+freeFields[2]+freeFields[3]+freeFields[4]+freeFields[5]);
		int lineLength = myBallsToMove.size();

		for (Step move : tableOfMoves) {
			if (freeFields[move.id()] == lineLength) {
				System.out.println("przedadd");
				possibleMoves.add(move);
				System.out.println("poadd");
			}
		}

		Step[] movesAlongLine = ballsToMoveOrientation.movesAlongLine();
		for (Step move : movesAlongLine) {
			boolean isPossible = isMoveAlongLinePossible(move);
			if (isPossible) {
				System.out.println("przedadd2");
				possibleMoves.add(move);
				System.out.println("poadd2");

			}
		}

		state = CHOOSE_MOVE;
		System.out.println(state);
		return possibleMoves;
	}

	public void endGame() {
		state = GAME_ENDED;
	}

	private int[] makeFreeFieldsTable() {
		int[] movesTable = { 0, 0, 0, 0, 0, 0 };

		for (Ball ball : myBallsToMove) {
			int x = ball.getX();
			int y = ball.getY();
			for (Step move : tableOfMoves) {
				int dx = move.dx();
				int dy = move.dy();
				if (myBalls.getBall(x + dx, y + dy) == null && opponentBalls.getBall(x + dx, y + dy) == null)
					movesTable[move.id()]++;
			}
		}
		return movesTable;
	}

	private boolean isMoveAlongLinePossible(Step move) {
		int lineLength = myBalls.size();
		Ball lastBall = myBalls.get(lineLength - 1);
		int x2 = lastBall.getX();
		int y2 = lastBall.getY();
		int dx = move.dx();
		int dy = move.dy();

		for (int i = 1; i <= lineLength; i++) {
			Ball ball = myBalls.getBall(x2 + i * dx, y2 + i * dy);
			if (ball == null) {
				Ball tmpOpponentBall = opponentBalls.getBall(x2 + i * dx, y2 + i * dy);
				if (tmpOpponentBall == null) {
					System.out.println("nie ma nic na polu");
					return true;
				} else {
					System.out.println("jest pole przeciwnika");
					opponentBallsToMove.add(tmpOpponentBall);
					if (i == lineLength) {
						opponentBallsToMove.clear();
						System.out.println("jest pole przeciwnika na ostatnim");
						return false;
					}
				}
			} else {
				if (myBallsToMove.contains(ball)) {
					return false;
				} else {
					opponentBallsToMove.clear();
					return false;
				}
			}
		}
		return false;
	}

	private void setBoardModel() {

		ListOfBalls ballsList1 = new ListOfBalls();
		ListOfBalls ballsList2 = new ListOfBalls();
		if (MY_COLOR == BLACK) {
			myBalls = ballsList1;
			opponentBalls = ballsList2;
		} else {
			myBalls = ballsList2;
			opponentBalls = ballsList1;
		}
		for (int i = 4; i <= 12; i += 2) {
			Ball ball = new Ball(BLACK, i, 0);
			ballsList1.add(ball);
		}
		for (int i = 3; i <= 13; i += 2) {
			Ball ball = new Ball(BLACK, i, 1);
			ballsList1.add(ball);
		}
		for (int i = 6; i <= 10; i += 2) {
			Ball ball = new Ball(BLACK, i, 2);
			ballsList1.add(ball);
		}

		// adding opponent's balls
		for (int i = 4; i <= 12; i += 2) {
			Ball ball = new Ball(WHITE, i, 8);
			ballsList2.add(ball);
		}
		for (int i = 3; i <= 13; i += 2) {
			Ball ball = new Ball(WHITE, i, 7);
			ballsList2.add(ball);
		}
		for (int i = 6; i <= 10; i += 2) {
			Ball ball = new Ball(WHITE, i, 6);
			ballsList2.add(ball);
		}
	}

	public State getState() {
		return state;
	}

	public int getMyCounter() {
		return myCounter;
	}

	public int getOpponentCounter() {
		return opponentCounter;
	}

	public int[] getFirstBallPos() {
		Ball firstBall = myBallsToMove.get(0);
		if (firstBall == null)
			return null;
		int[] pos = { firstBall.getX(), firstBall.getY() };
		return pos;
	}

	public int getLineLength() {
		return myBallsToMove.size();
	}

	public Step getLineStep() {
		if (getLineLength() < 2)
			return null;
		Ball firstBall = myBallsToMove.get(0);
		Ball secondBall = myBallsToMove.get(1);
		return Step.getStep(firstBall.getX() - secondBall.getX(), firstBall.getY() - secondBall.getY());
	}

}
