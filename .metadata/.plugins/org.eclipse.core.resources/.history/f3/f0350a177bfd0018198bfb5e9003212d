package old.model;

import java.util.List;

import javax.jms.JMSConsumer;

import jms.Consumer;
import jms.Producer;
import view.Move;

public class Messaging {

	public static Producer producer;
	public static Consumer consumer;
	private static ListOfBalls chosenBalls = new ListOfBalls();
	private static ListOfBalls opponentToMoveBalls = new ListOfBalls();

	static {
		try {
			producer = new Producer("localhost:4848/jms", "ATJQueue"); // Second player: ATJQueue
			consumer = new Consumer("localhost:4848/jms", "ATJ2queue"); // Second player: ATJ2queue
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void sendQueueMessage(String message) {
		producer.sendQueueMessage(message);
	}

	public static String makeMsgString(List<Ball> chosenBalls, List<Ball> opponentToMoveBalls, Move move) {
		StringBuilder builder = new StringBuilder();
		builder.append(move.id());
		builder.append(" ");
		builder.append(chosenBalls.size());
		builder.append(" ");
		for (Ball tmpBall : chosenBalls) {
			builder.append(tmpBall.getPosX() + " " + tmpBall.getPosY() + " ");
		}

		builder.append(opponentToMoveBalls.size());
		builder.append(" ");
		for (Ball tmpBall : opponentToMoveBalls) {
			builder.append(tmpBall.getPosX() + " " + tmpBall.getPosY() + " ");
		}

		return builder.toString();

	}

	public static Move readFromMsgString(String message, ListOfBalls myBallsList, ListOfBalls opponentBallsList) {
		String[] data = message.split(" ");
		Move move = Move.getFromID(Integer.parseInt(data[0]));
		int opponentBallsLength = Integer.parseInt(data[1]);
		for (int i = 2; i < 2 * opponentBallsLength + 2; i += 2) {
			int x = Integer.parseInt(data[i]);
			int y = Integer.parseInt(data[i + 1]);
			Ball tmpBall = opponentBallsList.getBall(x, y);
			System.out.println("x" + x + "y" + y);
			opponentToMoveBalls.add(tmpBall);
		}
		int myBallsLength = Integer.parseInt(data[2 * opponentBallsLength + 2]);
		for (int i = 2 * opponentBallsLength + 3; i < 2 * myBallsLength + 2 * opponentBallsLength + 3; i += 2) {
			int x = Integer.parseInt(data[i]);
			int y = Integer.parseInt(data[i + 1]);
			Ball tmpBall = myBallsList.getBall(x, y);
			System.out.println("x2" + x + "y2" + y);
			chosenBalls.add(tmpBall);
		}
		return move;

	}

	public static ListOfBalls getChosenBalls() {
		return chosenBalls;
	}

	public static ListOfBalls getOpponentToMoveBalls() {
		return opponentToMoveBalls;
	}

	public static JMSConsumer getJmsConsumer() {
		// TODO Auto-generated method stub
		return consumer.getJmsConsumer();
	}

}
