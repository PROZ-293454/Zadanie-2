package view;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import view.Color;

import static view.Color.*;

import java.util.ArrayList;
import java.util.List;

public class BoardView {

	private final static Image blackBallImg;
	private final static Image whiteBallImg;
	private final static Image blackChosenBallImg;
	private final static Image whiteChosenBallImg;
	private final static Image moveButtonImg;
	private final static ImageView BORDER;

	static {
		blackBallImg = new Image(BoardView.class.getResourceAsStream("black_ball.png"));
		whiteBallImg = new Image(BoardView.class.getResourceAsStream("white_ball.png"));
		blackChosenBallImg = new Image(BoardView.class.getResourceAsStream("black_chosen_ball.png"));
		whiteChosenBallImg = new Image(BoardView.class.getResourceAsStream("white_chosen_ball.png"));
		moveButtonImg = new Image(BoardView.class.getResourceAsStream("move.png"));
		BORDER = new ImageView();
	}

	private ImageView[][] board;
	private List<ImageView> moveButtons;
	private GridPane boardPane;

	public BoardView(GridPane boardPane) {
		this.board = new ImageView[17][9];
		this.moveButtons = new ArrayList<>();
		this.boardPane = boardPane;
	}

	private Image getBallImage(Color color, boolean isChosen) {
		if (isChosen)
			return color == BLACK ? blackChosenBallImg : whiteChosenBallImg;
		else
			return color == BLACK ? blackBallImg : whiteBallImg;
	}

	private ImageView addBall(int x, int y, Color color) {
		ImageView ball = new ImageView(getBallImage(color, false));
		boardPane.add(ball, x, y);
		return ball;
	}

	private ImageView addBall(int x, int y, ImageView ball) throws ArrayIndexOutOfBoundsException {
		if (board[x][y].equals(BORDER))
			throw new ArrayIndexOutOfBoundsException();
		board[x][y] = ball;
		boardPane.add(ball, x, y);
		return ball;
	}

	private ImageView deleteBall(int x, int y) {
		ImageView ball = board[x][y];
		boardPane.getChildren().remove(ball);
		board[x][y] = null;
		return ball;
	}

	private ImageView moveBall(int x, int y, int dx, int dy) throws ArrayIndexOutOfBoundsException {
		ImageView ball = deleteBall(x, y);
		return addBall(x + dx, y + dy, ball);
	}

	private ImageView addMoveButton(int x, int y, ImageMove move) {
		int dx = move.getDx();
		int dy = move.getDy();
		int rotation = move.getRotation();

		ImageView moveButton = new ImageView(moveButtonImg);
		moveButton.setRotate(rotation);

		moveButtons.add(moveButton);
		boardPane.add(moveButton, x + dx, y + dy);
		return moveButton;
	}

	private void deleteMoveButton(ImageView moveButton) {

		moveButtons.remove(moveButton);
		boardPane.getChildren().remove(moveButton);
	}

	public List<ImageView> moveLineOfBalls(int x1, int y1, int dx, int dy, int numberOfBalls, ImageMove move) {
		List<ImageView> movedBalls = new ArrayList<>();

		for (int i = 0; i < numberOfBalls; i++) {
			int x = x1 + dx * i;
			int y = y1 + dy * i;

			try {
				ImageView newBall = moveBall(x, y, move.getDx(), move.getDy());
				movedBalls.add(newBall);
			} catch (ArrayIndexOutOfBoundsException e) {
				System.out.println("poza granicami");
				continue;
			}

		}
		return movedBalls;
	}

	public List<ImageView> addAllMoveButtons(int x, int y, List<ImageMove> possibleMovesList) {
		for (ImageMove move : possibleMovesList)
			addMoveButton(x, y, move);

		return moveButtons;
	}

	public void deleteAllMoveButtons(int x, int y) {
		for (ImageView moveButton : moveButtons)
			deleteMoveButton(moveButton);
	}

	private void setBorder() {
		for (int y = 0; y < 3; y++) {
			for (int x = 0; x < 4 - y; x++)
				board[x][y] = BORDER;
			for (int x = 13 + y; x < 17; x++)
				board[x][y] = BORDER;
		}
		for (int y = 5; y < 9; y++) {
			for (int x = 0; x < y - 4; x++)
				board[x][y] = BORDER;
			for (int x = 21 - y; x < 17; x++)
				board[x][y] = BORDER;
		}
	}

	public List<ImageView> setBoard(Color black) {

		List<ImageView> blackBallList = new ArrayList<>();
		List<ImageView> whiteBallList = new ArrayList<>();
		setBorder();

		for (int i = 4; i <= 12; i += 2) {
			ImageView ball = new ImageView(blackBallImg);
			blackBallList.add(ball);
			board[i][0] = ball;
			boardPane.add(ball, i, 0);
		}
		for (int i = 3; i <= 13; i += 2) {
			ImageView ball = new ImageView(blackBallImg);
			blackBallList.add(ball);
			board[i][1] = ball;
			boardPane.add(ball, i, 1);
		}
		for (int i = 6; i <= 10; i += 2) {
			ImageView ball = new ImageView(blackBallImg);
			blackBallList.add(ball);
			board[i][2] = ball;
			boardPane.add(ball, i, 2);
		}

		// adding opponent's balls
		for (int i = 4; i <= 12; i += 2) {
			ImageView ball = new ImageView(whiteBallImg);
			whiteBallList.add(ball);
			board[i][8] = ball;
			boardPane.add(ball, i, 8);
		}
		for (int i = 3; i <= 13; i += 2) {
			ImageView ball = new ImageView(whiteBallImg);
			whiteBallList.add(ball);
			board[i][7] = ball;
			boardPane.add(ball, i, 7);
		}
		for (int i = 6; i <= 10; i += 2) {
			ImageView ball = new ImageView(whiteBallImg);
			whiteBallList.add(ball);
			board[i][6] = ball;
			boardPane.add(ball, i, 6);
		}

		if (black == BLACK)
			return blackBallList;
		else
			return whiteBallList;
	}

}
