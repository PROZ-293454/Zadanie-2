package view;

import static view.BallImage.Color.BLACK;
import static view.BallImage.Color.WHITE;

import java.util.ArrayList;
import java.util.List;

import controller.Move;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import model.ListOfBalls;
import view.BallImage.Color;

public class Board {
	
	private List<BallImage> myBallsList;
	private List<BallImage> opponentBallsList;
	private GridPane board;
	private List<ImageView> moveButtons;
	Image arrow = new Image(Main.class.getResourceAsStream("baseline_arrow_forward_black_36dp.png"));
	
	
	public Board(GridPane xboard) {
		this.board = xboard;
		this.myBallsList = new ArrayList<>();
		this.opponentBallsList = new ArrayList<>();
		this.moveButtons = new ArrayList<>();
	}
	
	
	private List<BallImage> getList(Color color) {
		if (color == BLACK)
			return myBallsList;
		else
			return opponentBallsList;
	}
	
	public List<BallImage> moveBalls(Move move, List<BallImage> chosenBalls) {
		int dx = move.dx();
		int dy = move.dy();
		List<BallImage> movedBalls = new ArrayList<>();
		// System.out.println("chosenBallslength: "+chosenBalls.size());
		if (chosenBalls.size() > 0) {
		}
		for (BallImage tmpBall : chosenBalls) {
			int x = tmpBall.getPosX();
			int y = tmpBall.getPosY();
			Color color = tmpBall.getColor();
			getList(color).remove(tmpBall);
			board.getChildren().removeAll(moveButtons);
			moveButtons.removeAll(moveButtons);
			board.getChildren().remove(tmpBall);
			BallImage newBall = new BallImage(color, x + dx, y + dy);
			//newBall.setOnMouseClicked(e -> clickBall(newBall));
			board.add(newBall, x + dx, y + dy);
			movedBalls.add(newBall);
			getList(color).add(newBall);
		}
		return movedBalls;
	}

	public List<BallImage> getMyBallsList() {
		return myBallsList;
	}

	/*public List<BallImage> getOpponentBallsList() {
		return opponentBallsList;
	}*/
	
	public ImageView setOneMoveButton(Move move, int x, int y) {
		ImageView btn = new ImageView(arrow);
		btn.setRotate(move.angle());
		moveButtons.add(btn);
		//btn.setOnMouseClicked(e -> moveChoiceClicked(move));
		board.add(btn, x + move.dx(), y + move.dy(), 1, 1);
		return btn;
	}

	public List<BallImage> setBoard() {
		for (int i = 6; i < 15; i += 2) {
			BallImage ball = new BallImage(BLACK, i, 1);
			myBallsList.add(ball);
			board.add(ball, i, 1);
		}
		for (int i = 5; i < 16; i += 2) {
			BallImage ball = new BallImage(BLACK, i, 2);
			myBallsList.add(ball);
			board.add(ball, i, 2);
		}
		for (int i = 8; i < 13; i += 2) {
			BallImage ball = new BallImage(BLACK, i, 3);
			myBallsList.add(ball);
			board.add(ball, i, 3);
		}

		// adding opponent's balls
		for (int i = 6; i < 15; i += 2) {
			BallImage ball = new BallImage(WHITE, i, 9);
			opponentBallsList.add(ball);
			board.add(ball, i, 9);
		}
		for (int i = 5; i < 16; i += 2) {
			BallImage ball = new BallImage(WHITE, i, 8);
			opponentBallsList.add(ball);
			board.add(ball, i, 8);
		}
		for (int i = 8; i < 13; i += 2) {
			BallImage ball = new BallImage(WHITE, i, 7);
			opponentBallsList.add(ball);
			board.add(ball, i, 7);
		}
		
		return myBallsList;
		
	}
	
	
}
